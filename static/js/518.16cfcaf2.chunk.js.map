{"version":3,"file":"static/js/518.16cfcaf2.chunk.js","mappings":"+PAEaA,EAAgB,mCAAG,WAAOC,EAAKC,GAAZ,iFACf,mCACTC,EAFwB,yDAEwCF,EAFxC,YAE+CC,EAF/C,gBACf,mCADe,yBAIPE,EAAAA,EAAAA,IAAUD,GAJH,uBAItBE,EAJsB,EAItBA,KAJsB,kBAKvBA,GALuB,2CAAH,wDAQvBC,EAAY,IAAIC,QACtBD,EAAUE,OAAO,SAAU,oCAE3B,IAAMC,EAAiB,CACrBC,OAAQ,MACRC,SAAU,SACVC,QAASN,GAGEO,EAAgB,SAAAC,GAC3B,IAAMC,EAAeD,EAAME,MAAM,KACjCC,QAAQC,IAAIH,GACZ,IAAMI,EAAOJ,EAAa,GACpBK,EAAKL,EAAa,GAClBM,EAASN,EAAa,GAC5B,OAAOO,MAAM,0DAAD,OACgDF,EADhD,iBAC2DD,EAD3D,mBAC0EE,GACpFZ,GACAc,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,GAChB,EAEYC,EAAkB,WAC7B,OAAOJ,MACL,kFACAb,GACAc,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,GAChB,C,yFClCYE,EAAO,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAOrB,OACE,kBAAMA,SAPa,SAAAC,GACnBA,EAAIC,iBACJF,EAASC,EAAIE,cAAcC,SAASC,SAASnB,OAC7Ce,EAAIE,cAAcG,OACnB,EAGC,WACE,6DAEE,kBAAOC,KAAK,OAAOC,KAAK,iBAE1B,mBAAQD,KAAK,SAAb,sBAGL,E,kBCmCD,EAjDkB,WAChB,OAAgCE,EAAAA,EAAAA,UAAS,MAAzC,eAAOJ,EAAP,KAAiBK,EAAjB,KACA,GAA0BD,EAAAA,EAAAA,UAAS,IAAnC,eAAOvB,EAAP,KAAcyB,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,MACAC,EAAAA,EAAAA,YAAU,WAoBRC,UAAUC,YAAYC,oBAbtB,SAAiBC,GACf,IAAMC,EAAMD,EAAIE,QAEhBhD,EAAAA,EAAAA,IAAiB+C,EAAIE,SAAUF,EAAIG,WAAW3B,MAAK,SAAAlB,GAAI,OACrDiC,EAAYjC,EAAK8C,QAAQ,GAAGC,YAAYnB,SAASoB,SADI,GAGxD,IAED,SAAeC,GACbrC,QAAQsC,KAAR,gBAAsBD,EAAIE,KAA1B,cAAoCF,EAAIG,UACxCnB,EAAY,MACb,GAjBe,CACdoB,oBAAoB,EAEpBC,WAAY,GAiBf,GAAE,IAcH,OARAjB,EAAAA,EAAAA,YAAU,WACH5B,IAILD,EAAAA,EAAAA,IAAcC,GAAOS,MAAK,gBAAGiB,EAAH,EAAGA,OAAH,OAAgBC,EAAUD,EAA1B,GAC3B,GAAE,CAAC1B,KAGF,iCACE,6CAAqBmB,MACrB,SAACN,EAAD,CAAMC,SAfa,SAAAgC,GACrBrB,EAASqB,EACV,KAcG,6CAAqB9C,MACrB,6CAAqB0B,OAG1B,C","sources":["Service/api.js","components/Form/Form.jsx","pages/converter/Converter.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const fetchGeoposition = async (lat, long) => {\n  const apiKey = 'd4683b09d0c94ec0aebf0b2e043decbf';\n  const urlPosition = `https://api.opencagedata.com/geocode/v1/json?q=${lat}+${long}&key=${apiKey}&language=en`;\n\n  const { data } = await axios.get(urlPosition);\n  return data;\n};\n\nconst myHeaders = new Headers();\nmyHeaders.append('apikey', 'Ooj3b5wNKzWoS6CAI2yX4lmGJDbhW6fB');\n\nconst requestOptions = {\n  method: 'GET',\n  redirect: 'follow',\n  headers: myHeaders,\n};\n\nexport const fetchExchange = value => {\n  const valueToArray = value.split(' ');\n  console.log(valueToArray);\n  const from = valueToArray[1];\n  const to = valueToArray[3];\n  const amount = valueToArray[0];\n  return fetch(\n    `https://api.apilayer.com/exchangerates_data/convert?to=${to}&from=${from}&amount=${amount}`,\n    requestOptions,\n  ).then(response => response.json());\n};\n\nexport const currentExchange = () => {\n  return fetch(\n    'https://api.apilayer.com/exchangerates_data/latest?symbols=USD,GBP,EUR&base=UAH',\n    requestOptions,\n  ).then(response => response.json());\n};\n","\n\nexport const Form = ({ onSubmit }) => {\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    onSubmit(evt.currentTarget.elements.currency.value);\n    evt.currentTarget.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Enter text for exchange rate\n        <input type=\"text\" name=\"currency\" />\n      </label>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n","import { Form } from 'components/Form/Form';\nimport { useEffect, useState } from 'react';\nimport { fetchGeoposition, fetchExchange } from '../../Service/api';\n\nconst Converter = () => {\n  const [currency, setCurrency] = useState(null);\n  const [value, setValue] = useState('');\n  const [result, setResult] = useState('');\n  useEffect(() => {\n    const options = {\n      enableHighAccuracy: true,\n\n      maximumAge: 0,\n    };\n\n    function success(pos) {\n      const crd = pos.coords;\n\n      fetchGeoposition(crd.latitude, crd.longitude).then(data =>\n        setCurrency(data.results[0].annotations.currency.iso_code)\n      );\n    }\n\n    function error(err) {\n      console.warn(`ERROR(${err.code}): ${err.message}`);\n      setCurrency('USD');\n    }\n\n    navigator.geolocation.getCurrentPosition(success, error, options);\n  }, []);\n\n  const submitCurrency = query => {\n    setValue(query);\n  };\n\n  useEffect(() => {\n    if (!value) {\n      return;\n    }\n\n    fetchExchange(value).then(({ result }) => setResult(result));\n  }, [value]);\n\n  return (\n    <>\n      <div>Your currency: {currency}</div>\n      <Form onSubmit={submitCurrency} />\n      <p>Your input data: {value}</p>\n      <p>Exchange result: {result}</p>\n    </>\n  );\n};\n\nexport default Converter;\n"],"names":["fetchGeoposition","lat","long","urlPosition","axios","data","myHeaders","Headers","append","requestOptions","method","redirect","headers","fetchExchange","value","valueToArray","split","console","log","from","to","amount","fetch","then","response","json","currentExchange","Form","onSubmit","evt","preventDefault","currentTarget","elements","currency","reset","type","name","useState","setCurrency","setValue","result","setResult","useEffect","navigator","geolocation","getCurrentPosition","pos","crd","coords","latitude","longitude","results","annotations","iso_code","err","warn","code","message","enableHighAccuracy","maximumAge","query"],"sourceRoot":""}